import os, sys
import re

folder_path = 'D:\\Users\\Gabriele\\Desktop\\Machine Learning\\Homework 1\\drebin\\feature_vectors\\'
# folder_path = 'D:\\Users\\Gabriele\\Desktop\\Machine Learning\\Homework 1\\drebin\\reduced\\'
# folder_path = '/home/gabrydx/Documenti/ML/drebin/feature_vectors/'


"""Returns 2 lists: hash filename and family of a malware"""
def load_malware_info():
	with open('sha256_family.csv', 'r') as f:
	# with open('test.csv', 'r') as f:
		raw_data = f.read()
		f.close()
	raw_data = raw_data.strip()
	data = raw_data.split('\n')
	hash_name = list()
	malware_name = list()
	for row in data:
		d = row.split(',')
		hash_name.append(d[0])
		malware_name.append(d[1])
	# print(hash_name[100], malware_name[100])
	return hash_name[1:], malware_name[1:]


def malware_map():
	hash_name, family = load_malware_info()
	db = {}
	for i, filename in enumerate(hash_name):
		fam = family[i]
		db.update({filename: fam})
	return db


def analyze_file(filename, family):
	with open(folder_path + filename, 'r') as f:
		raw_data = f.read()
		f.close()
	raw_data = raw_data.strip()
	data = raw_data.split('\n')
	dic = family
	for d in data:
		if d:
			d = d.strip()
			# print(d)
			infos = d.split('::')
			tipo = infos[0]
			valore = infos[1]
			if tipo in dic.keys():
				valori = dic.get(tipo)
				if valore in valori.keys():
					v = valori.get(valore)
					v += 1
					valori.update({valore: v})
				else:
					valori.update({valore: 1})
				dic.update({tipo: valori})
			else:
				dic.update({tipo: {valore: 1}})
	return dic


def virus_database():
	hash_name, family = load_malware_info()
	print(hash_name)
	print(family)
	db = {}
	for i, filename in enumerate(hash_name):
		fam = family[i]
		if fam in db.keys():
			dic = analyze_file(filename, db.get(fam))
		else:
			dic = analyze_file(filename, {})
		db.update({fam: dic})
	return db


def safe_database():
	list = folder_to_list()
	hash_name, family = load_malware_info()
	sdb = {}
	fam = 'safe'
	for filename in list:
		if not filename in hash_name:
			if fam in sdb.keys():
				dic = analyze_file(filename, sdb.get(fam))
			else:
				dic = analyze_file(filename, {})
			sdb.update({fam: dic})
	return sdb


def database():
	list = folder_to_list()
	hash_name, family = load_malware_info()
	db = {}
	for filename in list:
		if filename in hash_name:
			indice = hash_name.index(filename)
			fam = family[indice]
		else:
			fam = 'Safe'
		# print(filename + '\t' + fam)
		if fam in db.keys():
			dic = analyze_file(filename, db.get(fam))
		else:
			dic = analyze_file(filename, {})
		db.update({fam: dic})
	return db


def database_train(train_data):
	hash_name, family = load_malware_info()
	db = {}
	for filename in train_data:
		if filename in hash_name:
			indice = hash_name.index(filename)
			fam = family[indice]
		else:
			fam = 'Safe'
		# print(filename + '\t' + fam)
		if fam in db.keys():
			dic = analyze_file(filename, db.get(fam))
		else:
			dic = analyze_file(filename, {})
		db.update({fam: dic})
	return db


# def database_normalization(): # finisci dopo
# 	db = database()
# 	for family in db.keys():
# 		attributi = db.get(family)
# 		for value1 in attributi.keys():
# 			tipo = attributi.get(value1)
# 			for value2 in tipo:
# 				num_value = tipo.get(value2)
# 				print(value2 + '\t' + str(num_value))


def malware_converter():
	# mw = {}
	db = virus_database()
	new_valori = {}
	for family in db.keys():
		print('FAMILY: ' + family)
		valori = db.get(family)
		for valore in valori.keys():
			attributo = valori.get(valore)
			for att in attributo.keys():
				a = attributo.get(att)
				# print(valore + ' ' + str(a))
				new_a = a
				new_attributo = new_valori.get(valore)
				if not new_attributo:
					new_attributo = {}
					new_valori.update({valore: {}})
				if att in new_attributo.keys():
					new_a += new_attributo.get(att)
				new_valori.get(valore).update({att: new_a})
				print('--> ' + valore + ':  ' + att + ' = ' + str(new_a))
	return new_valori


def folder_to_list():
	# Open a file
	dirs = os.listdir(folder_path)
	return dirs


# def distributer(all_files, malware_files):
# 	safe_multi, malware_multi = dict(), dict()
# 	safe_ber, malware_ber = dict(), dict()
# 	n_safe, n_malware = 0, 0
# 	for i, filename in enumerate(all_files):
# 		if filename in malware_files:
# 			n_malware += 1
# 			for j in set(filename[1:]):
# 				if j in malware_multi.keys():
# 					malware_multi[j] += 1
# 				else:
# 					malware_multi[j] = 1
# 				if j in malware_ber.keys():
# 					malware_ber[j] += 1
# 				else:
# 					malware_ber[j] = 1
# 				if not j in safe_multi.keys():
# 					safe_multi[j] = 0
# 				if not j in safe_ber.keys():
# 					safe_ber[j] = 0
# 		else:
# 			n_safe += 1
#
# 	return safe_ber, safe_multi, malware_ber, malware_multi, n_safe, n_malware


def count_files(all_files, malware_files):
	n_safe = len(all_files) - len(malware_files)
	n_malware = len(malware_files)
	return n_safe, n_malware


if __name__ == "__main__":
	db = database()
	for i in db:
		print(i)
		print(db.get(i))

	# print(db.get('Safe'))

	# print(database())
	# print(malware_converter())

	# mw = malware_converter()
	# for i in mw:
	# 	print(i)
	# 	print(mw.get(i))

	# print(distributer(folder_to_list(), load_malware_info()[0]))
	# database_normalization()

	# print(analyze_file('000a067df9235aea987cd1e6b7768bcc1053e640b267c5b1f0deefc18be5dbe1', {}))
