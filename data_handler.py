import os
import progress_bar


folder_path = 'D:\\Users\\Gabriele\\Desktop\\Machine Learning\\Homework 1\\drebin\\feature_vectors\\'
csv_path = 'sha256_family.csv'


malware_map = dict()
folder_list = list()


def load_malware_info():
	"""Returns a dictionary with the hash filename as key and family of a malware as value"""
	with open(csv_path, 'r') as f:
		raw_data = f.read()
		f.close()
	raw_data = raw_data.strip()
	data = raw_data.split('\n')
	data = data[1:]
	global malware_map
	malware_map = dict()
	for row in data:
		d = row.split(',')
		malware_map.update({d[0]: d[1]})
	return malware_map


def folder_to_list():
	"""Returns a list with all the filenames in a folder"""
	global folder_list
	folder_list = os.listdir(folder_path)
	return folder_list


def analyze_file(filename, family_dictionary):
	"""Gets all the features of a specific file and puts them in the family dictionary"""
	with open(folder_path + filename, 'r') as f:
		raw_data = f.read()
		f.close()
	raw_data = raw_data.strip()
	data = raw_data.split('\n')
	dic = family_dictionary
	for d in data:
		if d:
			d = d.strip()
			# print(d)
			infos = d.split('::')
			tipo = infos[0]
			valore = infos[1]
			if tipo in dic.keys():
				valori = dic.get(tipo)
				if valore in valori.keys():
					v = valori.get(valore)
					v += 1
					valori.update({valore: v})
				else:
					valori.update({valore: 1})
				dic.update({tipo: valori})
			else:
				dic.update({tipo: {valore: 1}})
	return dic


def database_train(train_data):
	"""Organizes the training set getting all the data"""
	global malware_map
	db = {}
	max = len(train_data)
	incremento = 0
	for filename in train_data:
		progress_bar.update(max, incremento)
		incremento += 1
		if filename in malware_map.keys():
			fam = malware_map.get(filename)
		else:
			fam = 'Safe'
		# print(filename + '\t' + fam)
		if fam in db.keys():
			dic = analyze_file(filename, db.get(fam))
		else:
			dic = analyze_file(filename, {})
		db.update({fam: dic})
	return db


def count_files(all_files, malware_files):
	n_safe = len(all_files) - len(malware_files)
	n_malware = len(malware_files)
	return n_safe, n_malware


def create_dictionary_file(filename):
	"""All the features of a specific file"""
	file_analysis = analyze_file(filename, {})

	db_prefix = {}
	for prefix in file_analysis.keys():
		values = file_analysis.get(prefix)
		for value in values:
			if value in db_prefix:
				v = db_prefix.get(value)
				v += values.get(value)
			else:
				v = values.get(value)
			db_prefix.update({value: v})
	return db_prefix


def create_dictionary_malware(db_train):
	"""All the features of all the malware families in the training set"""
	db_train.pop("Safe", None)
	db_prefix = {}
	for family in db_train.keys():
		prefixes = db_train.get(family)
		for prefix in prefixes.keys():
			values = prefixes.get(prefix)
			for value in values:
				if value in db_prefix:
					v = db_prefix.get(value)
					v += values.get(value)
				else:
					v = values.get(value)
				db_prefix.update({value: v})
	return db_prefix


def create_dictionary_safe(db_train):
	"""All the features of all the safe family in the training set"""
	db_prefix = {}
	prefixes = db_train.get('Safe')
	max = len(prefixes.keys())
	incremento = 0
	for prefix in prefixes.keys():
		progress_bar.update(max, incremento)
		incremento += 1
		values = prefixes.get(prefix)
		for value in values:
			if value in db_prefix:
				v = db_prefix.get(value)
				v += values.get(value)
			else:
				v = values.get(value)
			db_prefix.update({value: v})
	progress_bar.update(100, 100)
	return db_prefix
