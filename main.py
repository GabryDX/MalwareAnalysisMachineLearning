import data_handler as da
import progress_bar


def bernoulli_nbc(doc, safe, malware, n_safe, n_malware, features):
	"""
	doc = file to analyze
	safe = database.get('Safe')
	malware = virus_database()
	n_safe = total number of safe files
	n_malware = total number of malware files
	features = list with all the possible features
	"""
	p_safe, p_malware = 1.0, 1.0
	for s in features:
		if s in safe.keys():
			p_s = (safe[s] + 1) / (n_safe + 2)
		else:
			p_s = 1 / (n_safe + 2)
		if s in malware.keys():
			p_m = (malware[s] + 1) / (n_malware + 2)
		else:
			p_m = 1 / (n_malware + 2)
		if s in doc:
			p_safe *= p_s
			p_malware *= p_m
		else:
			p_safe *= (1 - p_s)
			p_malware *= (1 - p_m)
	# print(str(p_safe) + '\t' + str(p_malware))
	t = max(p_safe, p_malware)
	if t == p_safe:
		return 'safe'
	elif t == p_malware:
		return 'malware'


if __name__ == "__main__":
	print('Loading initial variables - Start')
	all_files = da.folder_to_list()
	malware_map = da.load_malware_info()
	# malware_files = malware_map.keys()
	malware_files = list()
	for mw in malware_map.keys():
		if mw in all_files:
			malware_files.append(mw)

	n_safe, n_malware = da.count_files(all_files, malware_files)
	print('Loading initial variables - End')

	# k-fold cross validation
	print('K-fold Cross Validation - Start')
	fold_size = 500  # good value 5000
	acc = list()
	tp, tn, fp, fn = 0, 0, 0, 0

	for i in range(0, len(all_files), fold_size):
		print(str(i) + '-fold Cross Validation')
		test_data = all_files[i:i + fold_size]
		train_data = all_files[0:i] + all_files[(i + fold_size):]
		if len(test_data) < 30:
			break

		db_train = da.database_train(train_data)
		print('Loading Training Dictionaries - Start')
		safe = da.create_dictionary_safe(db_train)
		malware = da.create_dictionary_malware(db_train)
		safe, malware = da.add_zero_value(safe, malware)
		# features = da.get_all_features(safe, malware)
		features = safe.keys()  # now safe or malware have the same features
		print('Loading Training Dictionaries - End')

		f_acc = list()
		f_tp, f_tn, f_fp, f_fn = 0, 0, 0, 0
		incremento = 0
		max_bar = len(test_data)
		for t_filename in test_data:
			if t_filename in malware_files:
				truth = 'malware'
			else:
				truth = 'safe'

			dic_current_file = da.create_dictionary_file(t_filename)

			# print('Bernoulli ' + t_filename)
			c_map = bernoulli_nbc(dic_current_file, safe, malware, n_safe, n_malware, features)
			print(t_filename + '\t' + c_map + ' - ' + truth)
			if c_map == truth:
				f_acc.append(1)
				acc.append(1)
				if c_map == 'malware':
					f_tp += 1
					tp += 1
				else:
					f_tn += 1
					tn += 1
			else:
				f_acc.append(0)
				acc.append(0)
				if c_map == 'malware':
					f_fp += 1
					fp += 1
				else:
					f_fn += 1
					fn += 1

			incremento += 1
			progress_bar.update(max_bar, incremento)

		print('True Positive for episode {} is: {}'.format(i / fold_size, f_tp))
		print('True Negative for episode {} is: {}'.format(i / fold_size, f_tn))
		print('False Positive for episode {} is: {}'.format(i / fold_size, f_fp))
		print('False Negative for episode {} is: {}'.format(i / fold_size, f_fn))
		# f_error_rate_d = f_tp + f_tn + f_fp + f_fn
		# if not f_error_rate_d == 0:
		f_error_rate = (f_fn + f_fp) / (f_tp + f_tn + f_fp + f_fn)
		print('Error rate for episode {} is: {}'.format(i / fold_size, f_error_rate))
		print('Accuracy for episode {} is: {}'.format(i / fold_size, sum(f_acc) / len(f_acc)))
		f_recall = f_tp / (f_tp + f_fn)
		print('Recall for episode {} is: {}'.format(i / fold_size, f_recall))
		# if not f_tp + f_fp == 0:
		f_precision = f_tp / (f_tp + f_fp)
		print('Precision for episode {} is: {}'.format(i / fold_size, f_precision))
		f_f1_score = (2 * f_precision * f_recall) / (f_precision + f_recall)
		print('F1-score for episode {} is: {}'.format(i / fold_size, f_f1_score))
		break

	print('K-fold Cross Validation - End')

	print('True Positive for fold size {} is: {}'.format(fold_size, tp))
	print('True Negative for fold size {} is: {}'.format(fold_size, tn))
	print('False Positive for fold size {} is: {}'.format(fold_size, fp))
	print('False Negative for fold size {} is: {}'.format(fold_size, fn))
	error_rate = (fn + fp) / (tp + tn + fp + fn)
	print('Error rate for fold size {} is: {}'.format(fold_size, error_rate))
	print('Final Accuracy for fold size {} is: {}'.format(fold_size, sum(acc) / len(acc)))
	recall = tp / (tp + fn)
	print('Recall for fold size {} is: {}'.format(fold_size, recall))
	precision = tp / (tp + fp)
	print('Precision for fold size {} is: {}'.format(fold_size, precision))
	f1_score = (2 * precision * recall) / (precision + recall)
	print('F1-score for fold size {} is: {}'.format(fold_size, f1_score))

	print('Computation End')
