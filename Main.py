import re
import data_handler as da

""" bernoulli_nbc
doc = file to analyse
safe = database.get('Safe')
malware = virus_database()
n_safe = total number of safe files
n_malware = total number of malware files
all_files = list with all filenames
"""
def bernoulli_nbc(doc, safe, malware, n_safe, n_malware, all_files):
	p_safe, p_malware = 1.0, 1.0
	for s in all_files:
		if s in safe.keys():
			p_s = (safe[s] + 1) / (n_safe + 2)
		else:
			p_s = 1 / (n_safe + 2)
		if s in malware.keys():
			p_m = (malware[s] + 1) / (n_malware + 2)
		else:
			p_m = 1 / (n_malware + 2)
		if s in doc:
			p_safe *= p_s
			p_malware *= p_m
		else:
			p_safe *= (1 - p_s)
			p_malware *= (1 - p_m)
	t = max(p_safe, p_malware)
	if t == p_safe:
		return 'safe'
	elif t == p_malware:
		return 'malware'


def crea_dizionario_file(filename):
	"""Tutti gli attributi di un singolo file"""
	file_analysis = da.analyze_file(filename, {})

	db_prefix = {}
	for prefix in file_analysis.keys():
		values = file_analysis.get(prefix)
		for value in values:
			if value in db_prefix:
				v = db_prefix.get(value)
				v += values.get(value)
			else:
				v = values.get(value)
			db_prefix.update({value: v})
	return db_prefix


def crea_dizionario_virus(train_data):
	"""Tutti gli attributi di una famiglia"""
	db = da.database_train(train_data)
	db.pop("Safe", None)
	db_prefix = {}
	for family in db.keys():
		prefixes = db.get(family)
		for prefix in prefixes.keys():
			values = prefixes.get(prefix)
			for value in values:
				if value in db_prefix:
					v = db_prefix.get(value)
					v += values.get(value)
				else:
					v = values.get(value)
				db_prefix.update({value: v})
	return db_prefix


def crea_dizionario_safe(train_data):
	"""Tutti gli attributi di una famiglia"""
	db = da.database_train(train_data)
	db_prefix = {}
	prefixes = db.get('Safe')
	for prefix in prefixes.keys():
		values = prefixes.get(prefix)
		for value in values:
			if value in db_prefix:
				v = db_prefix.get(value)
				v += values.get(value)
			else:
				v = values.get(value)
			db_prefix.update({value: v})
	return db_prefix


# def bernoulli_prefix_classification():
# 	db = da.database()
# 	p_safe, p_malware = 1.0, 1.0
# 	for family in db.keys():
# 		prefixes = db.get(family)
# 		for prefix in prefixes.keys():
# 			if s in safe.keys():
# 				p_s = (safe[s] + 1) / (n_safe + 2)
# 			else:
# 				p_s = 1 / (n_safe + 2)
# 			if s in malware.keys():
# 				p_m = (malware[s] + 1) / (n_malware + 2)
# 			else:
# 				p_m = 1 / (n_malware + 2)
# 			if s in doc:
# 				p_safe *= p_s
# 				p_malware *= p_m
# 			else:
# 				p_safe *= (1 - p_s)
# 				p_malware *= (1 - p_m)


if __name__ == "__main__":
	print('Loading initial variables - Start')
	all_files = da.folder_to_list()
	malware_files = da.load_malware_info()[0]
	n_safe, n_malware = da.count_files(all_files, malware_files)
	malware_map = da.malware_map()
	print('Loading initial variables - End')

	# k-fold cross validation
	print('K-fold Cross Validation - Start')
	fold_size = 5000
	acc = list()

	for i in range(0, len(all_files), fold_size):
		print(str(i) + '-fold Cross Validation')
		test_data = all_files[i:i + fold_size]
		train_data = all_files[0:i] + all_files[(i + fold_size):]
		if len(test_data) < 30:
			break

		print('Loading Training Dictionaries - Start')
		print('Loading Safe Dictionary - Start')
		safe = crea_dizionario_safe(train_data)
		print('Loading Safe Dictionary - End')
		print('Loading Malware Dictionary - Start')
		malware = crea_dizionario_virus(train_data)
		print('Loading Malware Dictionary - End')
		print('Loading Training Dictionaries - End')

		f_acc = list()
		for t_filename in test_data:
			if t_filename in malware_map:
				truth = 'malware'
			else:
				truth = 'safe'

			dic_current_file = crea_dizionario_file(t_filename)
			print('Bernoulli ' + t_filename)
			c_map = bernoulli_nbc(dic_current_file, safe, malware, n_safe, n_malware, all_files)
			if c_map == truth:
				f_acc.append(1)
				acc.append(1)
			else:
				f_acc.append(0)
				acc.append(0)

		print('Accuracy for episode {} is: {}'.format(i / fold_size, sum(f_acc) / len(f_acc)))

	print('K-fold Cross Validation - End')
	print('Final Accuracy for fold size {} is: {}'.format(fold_size, sum(acc) / len(acc)))
